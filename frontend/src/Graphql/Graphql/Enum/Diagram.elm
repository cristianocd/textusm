-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Graphql.Enum.Diagram exposing (..)

import Json.Decode as D exposing (Decoder)


decoder : Decoder Diagram
decoder =
    D.string
        |> D.andThen
            (\string ->
                case string of
                    "BUSINESS_MODEL_CANVAS" ->
                        D.succeed BusinessModelCanvas

                    "EMPATHY_MAP" ->
                        D.succeed EmpathyMap

                    "ER_DIAGRAM" ->
                        D.succeed ErDiagram

                    "FOURLS" ->
                        D.succeed Fourls

                    "FREEFORM" ->
                        D.succeed Freeform

                    "GANTT_CHART" ->
                        D.succeed GanttChart

                    "IMPACT_MAP" ->
                        D.succeed ImpactMap

                    "KANBAN" ->
                        D.succeed Kanban

                    "KPT" ->
                        D.succeed Kpt

                    "MIND_MAP" ->
                        D.succeed MindMap

                    "OPPORTUNITY_CANVAS" ->
                        D.succeed OpportunityCanvas

                    "SEQUENCE_DIAGRAM" ->
                        D.succeed SequenceDiagram

                    "SITE_MAP" ->
                        D.succeed SiteMap

                    "START_STOP_CONTINUE" ->
                        D.succeed StartStopContinue

                    "TABLE" ->
                        D.succeed Table

                    "USER_PERSONA" ->
                        D.succeed UserPersona

                    "USER_STORY_MAP" ->
                        D.succeed UserStoryMap

                    "USE_CASE_DIAGRAM" ->
                        D.succeed UseCaseDiagram

                    _ ->
                        D.fail ("Invalid Diagram type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-|

  - UserStoryMap -
  - OpportunityCanvas -
  - BusinessModelCanvas -
  - Fourls -
  - StartStopContinue -
  - Kpt -
  - UserPersona -
  - MindMap -
  - EmpathyMap -
  - SiteMap -
  - GanttChart -
  - ImpactMap -
  - ErDiagram -
  - Kanban -
  - Table -
  - SequenceDiagram -
  - Freeform -
  - UseCaseDiagram -

-}
type Diagram
    = UserStoryMap
    | OpportunityCanvas
    | BusinessModelCanvas
    | Fourls
    | StartStopContinue
    | Kpt
    | UserPersona
    | MindMap
    | EmpathyMap
    | SiteMap
    | GanttChart
    | ImpactMap
    | ErDiagram
    | Kanban
    | Table
    | SequenceDiagram
    | Freeform
    | UseCaseDiagram


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Diagram
fromString enumString____ =
    case enumString____ of
        "BUSINESS_MODEL_CANVAS" ->
            Just BusinessModelCanvas

        "EMPATHY_MAP" ->
            Just EmpathyMap

        "ER_DIAGRAM" ->
            Just ErDiagram

        "FOURLS" ->
            Just Fourls

        "FREEFORM" ->
            Just Freeform

        "GANTT_CHART" ->
            Just GanttChart

        "IMPACT_MAP" ->
            Just ImpactMap

        "KANBAN" ->
            Just Kanban

        "KPT" ->
            Just Kpt

        "MIND_MAP" ->
            Just MindMap

        "OPPORTUNITY_CANVAS" ->
            Just OpportunityCanvas

        "SEQUENCE_DIAGRAM" ->
            Just SequenceDiagram

        "SITE_MAP" ->
            Just SiteMap

        "START_STOP_CONTINUE" ->
            Just StartStopContinue

        "TABLE" ->
            Just Table

        "USER_PERSONA" ->
            Just UserPersona

        "USER_STORY_MAP" ->
            Just UserStoryMap

        "USE_CASE_DIAGRAM" ->
            Just UseCaseDiagram

        _ ->
            Nothing


list : List Diagram
list =
    [ UserStoryMap, OpportunityCanvas, BusinessModelCanvas, Fourls, StartStopContinue, Kpt, UserPersona, MindMap, EmpathyMap, SiteMap, GanttChart, ImpactMap, ErDiagram, Kanban, Table, SequenceDiagram, Freeform, UseCaseDiagram ]


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Diagram -> String
toString enum____ =
    case enum____ of
        UserStoryMap ->
            "USER_STORY_MAP"

        OpportunityCanvas ->
            "OPPORTUNITY_CANVAS"

        BusinessModelCanvas ->
            "BUSINESS_MODEL_CANVAS"

        Fourls ->
            "FOURLS"

        StartStopContinue ->
            "START_STOP_CONTINUE"

        Kpt ->
            "KPT"

        UserPersona ->
            "USER_PERSONA"

        MindMap ->
            "MIND_MAP"

        EmpathyMap ->
            "EMPATHY_MAP"

        SiteMap ->
            "SITE_MAP"

        GanttChart ->
            "GANTT_CHART"

        ImpactMap ->
            "IMPACT_MAP"

        ErDiagram ->
            "ER_DIAGRAM"

        Kanban ->
            "KANBAN"

        Table ->
            "TABLE"

        SequenceDiagram ->
            "SEQUENCE_DIAGRAM"

        Freeform ->
            "FREEFORM"

        UseCaseDiagram ->
            "USE_CASE_DIAGRAM"
