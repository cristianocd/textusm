-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module TextUSM.InputObject exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import TextUSM.Enum.Diagram
import TextUSM.Interface
import TextUSM.Object
import TextUSM.Scalar
import TextUSM.ScalarCodecs
import TextUSM.Union


buildInputItem :
    InputItemRequiredFields
    -> (InputItemOptionalFields -> InputItemOptionalFields)
    -> InputItem
buildInputItem required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, thumbnail = Absent, tags = Absent }
    in
    { id = optionals____.id, title = required____.title, text = required____.text, thumbnail = optionals____.thumbnail, diagram = required____.diagram, isPublic = required____.isPublic, isBookmark = required____.isBookmark, tags = optionals____.tags }


type alias InputItemRequiredFields =
    { title : String
    , text : String
    , diagram : TextUSM.Enum.Diagram.Diagram
    , isPublic : Bool
    , isBookmark : Bool
    }


type alias InputItemOptionalFields =
    { id : OptionalArgument TextUSM.ScalarCodecs.Id
    , thumbnail : OptionalArgument String
    , tags : OptionalArgument (List (Maybe String))
    }


{-| Type for the InputItem input object.
-}
type alias InputItem =
    { id : OptionalArgument TextUSM.ScalarCodecs.Id
    , title : String
    , text : String
    , thumbnail : OptionalArgument String
    , diagram : TextUSM.Enum.Diagram.Diagram
    , isPublic : Bool
    , isBookmark : Bool
    , tags : OptionalArgument (List (Maybe String))
    }


{-| Encode a InputItem into a value that can be used as an argument.
-}
encodeInputItem : InputItem -> Value
encodeInputItem input____ =
    Encode.maybeObject
        [ ( "id", (TextUSM.ScalarCodecs.codecs |> TextUSM.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.id ), ( "title", Encode.string input____.title |> Just ), ( "text", Encode.string input____.text |> Just ), ( "thumbnail", Encode.string |> Encode.optional input____.thumbnail ), ( "diagram", Encode.enum TextUSM.Enum.Diagram.toString input____.diagram |> Just ), ( "isPublic", Encode.bool input____.isPublic |> Just ), ( "isBookmark", Encode.bool input____.isBookmark |> Just ), ( "tags", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input____.tags ) ]


buildInputShareItem :
    InputShareItemRequiredFields
    -> (InputShareItemOptionalFields -> InputShareItemOptionalFields)
    -> InputShareItem
buildInputShareItem required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { expSecond = Absent, password = Absent, allowIPList = Absent, allowEmailList = Absent }
    in
    { itemID = required____.itemID, expSecond = optionals____.expSecond, password = optionals____.password, allowIPList = optionals____.allowIPList, allowEmailList = optionals____.allowEmailList }


type alias InputShareItemRequiredFields =
    { itemID : String }


type alias InputShareItemOptionalFields =
    { expSecond : OptionalArgument Int
    , password : OptionalArgument String
    , allowIPList : OptionalArgument (List String)
    , allowEmailList : OptionalArgument (List String)
    }


{-| Type for the InputShareItem input object.
-}
type alias InputShareItem =
    { itemID : String
    , expSecond : OptionalArgument Int
    , password : OptionalArgument String
    , allowIPList : OptionalArgument (List String)
    , allowEmailList : OptionalArgument (List String)
    }


{-| Encode a InputShareItem into a value that can be used as an argument.
-}
encodeInputShareItem : InputShareItem -> Value
encodeInputShareItem input____ =
    Encode.maybeObject
        [ ( "itemID", Encode.string input____.itemID |> Just ), ( "expSecond", Encode.int |> Encode.optional input____.expSecond ), ( "password", Encode.string |> Encode.optional input____.password ), ( "allowIPList", (Encode.string |> Encode.list) |> Encode.optional input____.allowIPList ), ( "allowEmailList", (Encode.string |> Encode.list) |> Encode.optional input____.allowEmailList ) ]
