-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Graphql.Scalar exposing (Codecs, Id(..), ItemIdScalar(..), Time(..), defaultCodecs, defineCodecs, unwrapCodecs, unwrapEncoder)

import Graphql.Codec exposing (Codec)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode
import Json.Decode as Decode exposing (Decoder)
import Json.Encode as Encode


type Id
    = Id String


type ItemIdScalar
    = ItemIdScalar String


type Time
    = Time String


defineCodecs :
    { codecId : Codec valueId
    , codecItemIdScalar : Codec valueItemIdScalar
    , codecTime : Codec valueTime
    }
    -> Codecs valueId valueItemIdScalar valueTime
defineCodecs definitions =
    Codecs definitions


unwrapCodecs :
    Codecs valueId valueItemIdScalar valueTime
    ->
        { codecId : Codec valueId
        , codecItemIdScalar : Codec valueItemIdScalar
        , codecTime : Codec valueTime
        }
unwrapCodecs (Codecs unwrappedCodecs) =
    unwrappedCodecs


unwrapEncoder :
    (RawCodecs valueId valueItemIdScalar valueTime -> Codec getterValue)
    -> Codecs valueId valueItemIdScalar valueTime
    -> getterValue
    -> Graphql.Internal.Encode.Value
unwrapEncoder getter (Codecs unwrappedCodecs) =
    (unwrappedCodecs |> getter |> .encoder) >> Graphql.Internal.Encode.fromJson


type Codecs valueId valueItemIdScalar valueTime
    = Codecs (RawCodecs valueId valueItemIdScalar valueTime)


type alias RawCodecs valueId valueItemIdScalar valueTime =
    { codecId : Codec valueId
    , codecItemIdScalar : Codec valueItemIdScalar
    , codecTime : Codec valueTime
    }


defaultCodecs : RawCodecs Id ItemIdScalar Time
defaultCodecs =
    { codecId =
        { encoder = \(Id raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Id
        }
    , codecItemIdScalar =
        { encoder = \(ItemIdScalar raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map ItemIdScalar
        }
    , codecTime =
        { encoder = \(Time raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Time
        }
    }
